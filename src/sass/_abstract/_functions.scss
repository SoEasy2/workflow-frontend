@use 'sass:math';

$g-font-size-root: 16px !default;

@function gap($size: normal) {
  @return map-get($g-gaps, $size);
}

@function pad($size: normal) {
  @return map-get($g-pads, $size);
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

@function px-to-rem($value, $base-value: $g-font-size-root) {
  @if type-of($value) != 'number' {
    @warn 'value: #{$value} is not a number';
    @return null;
  }
  @if type-of($base-value) != 'number' {
    @warn 'base-value: #{$base-value} is not a number';
    @return null;
  }
  $value: math.div(strip-unit($value), strip-unit($base-value)) * 1rem;
  @if (strip-unit($value) == 0) {
    $value: 0;
  }
  @return $value;
}

@function rem-to-px($value, $base-value: $g-font-size-root) {
  @if type-of($value) != 'number' {
    @warn 'value: #{$value} is not a number';
    @return null;
  }
  @if type-of($base-value) != 'number' {
    @warn 'base-value: #{$base-value} is not a number';
    @return null;
  }
  $value: strip-unit($value) * strip-unit($base-value) * 1px;
  @if (strip-unit($value) == 0) {
    $value: 0;
  }
  @return $value;
}

@function pt-to-rem($value, $base-value: $g-font-size-root) {
  @if type-of($value) != 'number' {
    @warn 'value: #{$value} is not a number';
    @return null;
  }
  @if type-of($base-value) != 'number' {
    @warn 'base-value: #{$base-value} is not a number';
    @return null;
  }
  $value: math.div(math.div(strip-unit($value), strip-unit($base-value)) * 4, 3) * 1rem;
  @if (strip-unit($value) == 0) {
    $value: 0;
  }
  @return $value;
}

@function px-to-em($px, $base: $g-font-size-base) {
  $unit: unit($base);
  @if ($unit == rem) {
    $base: rem-to-px($base);
  }
  @return math.div($px, $base) * 1em;
}

@function color-palette($palette: 'gray', $weight: 100) {
  @return map-get(map-get($g-color-palettes, $palette), $weight);
}
